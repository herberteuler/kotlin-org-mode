/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package orgmode

import kotlin.test.Test
import kotlin.test.assertNotNull
import kotlin.test.assertEquals

class AppTest {
    // @Test fun testAppHasAGreeting() {
    //     val classUnderTest = App()
    //     assertNotNull(classUnderTest.greeting, "app should have a greeting")
    // }

    fun parseMarkup(s: String): MarkupText {
	return OrgParser(StringSource(s)).parse().entities[0].entities[0] as MarkupText
    }

    @Test fun testParseText() {
	
	val org: Org = parseMarkup("Test")

	val res: Org = MarkupText(listOf(Text("Test")))
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)
    }

    @Test fun testParseTextWords() {
	
	val org: Org = parseMarkup("Test Text")

	val res: Org = MarkupText(listOf(Text("Test"), Text("Text")))
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)
    }

    @Test fun testParseTextLines() {
	
	val org: Org = OrgParser(StringSource("""Test Text
Second Line
""")).parse()

	val res: Org = Document(listOf(Paragraph(listOf(MarkupText(listOf(Text("Test"), Text("Text"))), MarkupText(listOf(Text("Second"), Text("Line")))))))
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)
    }

    @Test fun testParseSections() {
	
	val org: Org = OrgParser(StringSource("""* Test1
** Test 2
* Test 3
""")).parse()

	val res: Org = Document(
	    listOf(
		Section(parseMarkup("Test1"), 1, listOf(
			    Section(parseMarkup("Test 2"), 2, emptyList())
		)),
		Section(parseMarkup("Test 3"), 1, emptyList())
	    )
	)
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)
    }

    @Test fun testParseSectionsWithText() {
	
	val org: Org = OrgParser(StringSource("""* Test1
Text 1
** Test 2
Text 2
Text 3
* Test 3
""")).parse()

	val res: Org = Document(
	    listOf(
		Section(parseMarkup("Test1"), 1, listOf(
			    Paragraph(listOf(
					  parseMarkup("Text 1")
			    )),
			    Section(parseMarkup("Test 2"), 2, listOf(
					Paragraph(listOf(
						      parseMarkup("Text 2"),
						      parseMarkup("Text 3")
					))
			    ))
		)),
		Section(parseMarkup("Test 3"), 1, emptyList())
	    )
	)
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)
    }


    @Test fun testMulitline() {

	val org: Org = OrgParser(StringSource("""
* Doc
Text 1
Same line\\
Another line
""")).parse()

	val res: Org = Document(
	    listOf(
		Section(parseMarkup("Doc"), 1, listOf(
			    Paragraph(listOf(
					  parseMarkup("Text 1"),
					  parseMarkup("Same line\\\\\n"),
					  parseMarkup("Another line")
			    ))
		))
	    )
	)
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)

    }
    
    @Test fun testList() {
	
	val org: Org = OrgParser(StringSource("""
* Unordered List
- elem 1

- elem 2

* Ordered List

1. elem 1

2. elem 2
""")).parse()

	val res: Org = Document(
	    listOf(
		Section(parseMarkup("Unordered List"), 1,
			listOf(
			    OrgList(
				listOf(
				    ListEntry(parseMarkup("elem 1")),
				    ListEntry(parseMarkup("elem 2"))
			    ))
		)),
		Section(parseMarkup("Ordered List"), 1,
			listOf(
			    OrgList(
				listOf(
				    ListEntry(parseMarkup("elem 1"), "1."),
				    ListEntry(parseMarkup("elem 2"), "2.")
			    ))
		))

	))
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)
    }

    @Test fun testListWithContent() {
	
	val org: Org = OrgParser(StringSource("""
* List
- elem 1
  Text
Not in list
- elem 2
  
  Another Text

  Still in list


         Not in list too

""")).parse()

	val res: Org = Document(
	    listOf(
		Section(parseMarkup("List"), 1,
			listOf(
			    OrgList(
				listOf(
				    ListEntry(parseMarkup("elem 1"), entities =
						  listOf(
						      Paragraph(
							  listOf(
							      parseMarkup("Text")
						      ))
				    ))
			    )),
			    Paragraph(
				listOf(
				    parseMarkup("Not in list")
			    )),
			    OrgList(
				listOf(
				    ListEntry(parseMarkup("elem 2"), entities =
						  listOf(
						      Paragraph(
							  listOf(
							      parseMarkup("Another Text")
						      )),
						      Paragraph(
							  listOf(
							      parseMarkup("Still in list")
						      ))
				    ))
			    )),
			    Paragraph(
				listOf(
				    parseMarkup("Not in list too")
			    ))
		))
	))
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)
    }

    @Test fun testTwoEmptyLinesBreaksAllLists() {
	
	val org: Org = OrgParser(StringSource("""
* List
- elem 1
  Text
  - inner list
    Inner list Text


  Text

""")).parse()

	val res: Org = Document(
	    listOf(
		Section(parseMarkup("List"), 1,
			listOf(
			    OrgList(
				listOf(
				    ListEntry(parseMarkup("elem 1"), entities =
						  listOf(
						      Paragraph(
							  listOf(
							      parseMarkup("Text")
						      )),
						      OrgList(
							  listOf(
							      ListEntry(parseMarkup("inner list"), entities =
									    listOf(
										Paragraph(
										    listOf(
											parseMarkup("Inner list Text")
										))
							      ))
						      ))
				    ))
			    )),
			    Paragraph(
				listOf(
				    parseMarkup("Text")
			    ))

		))
	))
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)
    }

    @Test fun testIndentBreaksAllLists() {
	
	val org: Org = OrgParser(StringSource("""
* List
- elem 1
  Text
  - inner list
    Inner list Text
Text

""")).parse()

	val res: Org = Document(
	    listOf(
		Section(parseMarkup("List"), 1,
			listOf(
			    OrgList(
				listOf(
				    ListEntry(parseMarkup("elem 1"), entities =
						  listOf(
						      Paragraph(
							  listOf(
							      parseMarkup("Text")
						      )),
						      OrgList(
							  listOf(
							      ListEntry(parseMarkup("inner list"), entities =
									    listOf(
										Paragraph(
										    listOf(
											parseMarkup("Inner list Text")
										))
							      ))
						      ))
				    ))
			    )),
			    Paragraph(
				listOf(
				    parseMarkup("Text")
			    ))

		))
	))
	
	println(org.toJson())
	println(res.toJson())
	
	assertEquals(org, res)
    }
}
